@using GucciFestival.Client.Pages
@using GucciFestival.Shared.NavigateMenus;
@using GucciFestival.Shared.VolenteerPages;
@using GucciFestival.Shared.CoordinatorPages;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">GucciFestival</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>


@switch (navigateMenu)
{
    case NavigateMenus.MainSide:
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-home" aria-hidden="true"></span> Login/Opret Konto
                    </NavLink>

                </div>
            </nav>
        </div>
        break;
    case NavigateMenus.Coordinator:
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profil">
                        <span class="oi oi-home" aria-hidden="true"></span> Profil
                    </NavLink>
                    <button @onclick="(() => CoordinatorPage(CoordinatorPages.ShiftCreate))">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Lav vagt
                    </button>


                    <button @onclick="(() => CoordinatorPage(CoordinatorPages.ShiftsAvailable))">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Ledige vagter
                    </button>


                    <button @onclick="(() => CoordinatorPage(CoordinatorPages.ShiftsTaken))">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Vagter taget
                    </button>

                    <button @onclick="(() => CoordinatorPage(CoordinatorPages.Volenteers))">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Frivillige
                    </button>

                </div>
            </nav>
        </div>



        break;
    case NavigateMenus.Volenteer:
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="profil">
                        <span class="oi oi-home" aria-hidden="true"></span> Profil
                    </NavLink>
                    <button @onclick="(() => VolenteerPage(VolenteerPages.ShiftsOwn))">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Min vagtplan
                    </button>

                    <div class="nav-item px-3">
                        <button @onclick="(() => VolenteerPage(VolenteerPages.ShiftsAvailable))">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> Ledige vagter
                        </button>
                    </div>
                </div>
            </nav>
        </div>

        break;
}

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    private NavigateMenus navigateMenu;


    /// <summary>
    /// Delegate, gør det muligt at kunne ændre navigations knapper i venstre side fra andre razor pages.
    /// Fordi at i dette tilfælde kan static metode og ikke static kun kommunikere ved hjælp af delegate.
    /// Kommunikere med "NavMenuChangeInPage"
    ///
    /// </summary>
    private static Action<NavigateMenus> navMenuChangeEvent;

    private static int volenteerIndex;


    protected override void OnInitialized()
    {

        navMenuChangeEvent = NavMenuChangeInPage;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    /// <summary>
    /// Denne static metode, som de andre razor pages kalder på. for at kunne ændre navigations knapper i ventre side
    /// Kommunikere med "NavMenuChangeInPage" og "NavMenuCHangeInPage".
    /// </summary>
    /// <param name="navigateMenu"></param>
    public static void NavMenuChange(NavigateMenus navigateMenu)
    {
        //Invoker betyder alt alle der er subscribede til "navMenuCHangeEvent" delegate, bliver "kaldt på" med paramenteren "navigateMenu"
        //Den har kun en subsriber, fordi den bliver "=" i OnInitialized metoden.
        navMenuChangeEvent?.Invoke(navigateMenu);

    }


    /// <summary>
    /// Dette er subsribeeren til "navMenuChangeEvent".
    /// Denne er en "ikke static", som gør det muligt at kunne kalde på "navigateMenu" og "StateHasChanged".
    /// Denne metode gør at navigations knapper i venstre side kan ændres imens programmet køre.
    /// </summary>
    /// <param name="navigateMenu"></param>
    private void NavMenuChangeInPage(NavigateMenus navigateMenu)
    {
        this.navigateMenu = navigateMenu;
        StateHasChanged();
    }


    /// <summary>
    /// For at kunne ændre side udsende på VolenteerPage ved hjælp af navigations knapper i venstre side.
    /// </summary>
    /// <param name="volenteerPage"></param>
    /// <param name="index"></param>
    private static void VolenteerPage(VolenteerPages volenteerPage)
    {

        VolenteerOwnPage.NavigateToVolenteerPage(volenteerPage);
    }
    /// <summary>
    /// For at kunne ændre side udsende på CoordinatorPage ved hjælp af navigations knapper i venstre side.
    /// </summary>
    /// <param name="volenteerPage"></param>
    /// <param name="index"></param>
    private static void CoordinatorPage(CoordinatorPages coordinatorPage)
    {
        CoordinatorOwnPage.NavigateToVolenteerPage(coordinatorPage);
    }
}