@using GucciFestival.Client.Models
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@using Nito.AsyncEx;
@inject NavigationManager NavManager
@page "/login"
@using GucciFestival.Shared;
<h3>Opret Konto</h3>
<EditForm EditContext=@editContext class="row p-3"
          OnValidSubmit=@HandleValidSubmit OnInvalidSubmit=@HandleInvalidSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h4>@userLoginMessage</h4>
    <div class="col-md-12 mb-3">
        <label for="Name">Name:</label>
        <InputText id="Name" @bind-Value="userModel.Name" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Email">Email:</label>
        <InputText id="Email" @bind-Value="userModel.Email" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Password">Password:</label>
        <InputText id="Password" @bind-Value="userModel.Password" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Tlf">Tlf:</label>
        <InputNumber id="Tlf" @bind-Value="userModel.Tlf" />
    </div>
    <div class="col-md-12 mb-3">
        <label for="Birthday">Birthday:</label>
        <InputDate id="Birthday" @bind-Value="userModel.Birthday" />
    </div>
    <button type="submit" class="btn-outline-primary">Login</button>

    <button type="submit" class="btn-outline-primary">Change navmenu</button>
</EditForm>
    @*<button @onsubmit=@(async () => await UserAdd())>Add user</button>*@
@code {
    private EditContext editContext;
    private UserModel userModel = new UserModel();

    private List<User> users = new List<User>();
    private string userLoginMessage;
    private User userTarget = new User();
    [Inject]
    public IUserService UserService { get; set; }


    protected override void OnInitialized()
    {
        editContext = new EditContext(userModel);
        userLoginMessage = string.Empty;

        users.Add(new User());
        users[0].Name = "Kimmi";
        users[0].Email = "kimmmmii@h";
    }
    protected override async Task OnInitializedAsync()
    {
        //users = (await UserService.GetAllUsers()).ToList();      
    }


    private void ChangeSide()
    {
        NavMenu.ChangeSideFlag();
    }

    public void UserLogin()
    {
        userTarget = null;
        Console.WriteLine("List User: " + users.Count);
        foreach (var userLooping in users)
        {
            Console.WriteLine("Email userloop: " + userLooping.Email + "Email usermodel: " + userModel.Email + " password userloop: " + userLooping.Password + " password usermodel " + userModel.Password);
            if (userLooping.Email == userModel.Email &&
                userLooping.Password == userModel.Password)
            {
                userTarget = userLooping;
                break;
            }
        }
        NavManager.NavigateTo("/userownside");
        userLoginMessage = userTarget != null ? "Found user" : "Not found user";
    }


    public async Task UserAdd()
    {
        Console.WriteLine("Start add user");
        User user = new User(userModel.Name, userModel.Email,userModel.Birthday,
                             userModel.Tlf,userModel.Password,/*Placeholder Comptence*/2,
                                /*User_id*/7,1,"default");
        await UserService.AddUser(user);
    }

    public void HandleValidSubmit()
    {
        Console.WriteLine("Hello handle Valid");
        UserLogin();
       // ChangeSide();
    }
    public void HandleInvalidSubmit()
    {
        Console.WriteLine("Hello handle not valid");
    }
}
