@using GucciFestival.Client.Models
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@using GucciFestival.Shared.LoginPage;
@using GucciFestival.Shared.Competences;
@using Nito.AsyncEx;
@inject NavigationManager NavManager
@using GucciFestival.Shared.NavigateMenus;
@page "/"
@page "/login"
@using GucciFestival.Shared;

@switch (loginPage)
{
    case LoginPages.StartPage:




        <h2> Login</h2>
        <button @onclick="(()=>SetLoginPage(LoginPages.Login))" class="btn btn-primary" width="60" height="100">log in</button>
        <button @onclick="(()=>SetLoginPage(LoginPages.AddUser))" class="btn btn-primary" width="60" height="100">opret bruger</button>




        break;
    case LoginPages.Login:
        <h3>Login </h3>
        <br>
        <h4>@userLoginMessage</h4>
        <EditForm Model=@loginModel
          Context="formContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="col-md-5">

                    <label for="Email">Email:</label>

                    <InputText id="Email" @bind-Value="loginModel.Email" class="form-control" />
                
                    <label for="Password">Password:</label>
                    <InputText id="Password" @bind-Value="loginModel.Password" class="form-control" />
                </div>
                <br>
                <button type="submit" class="btn btn-primary" @onclick="@(() => UserLogin(formContext))">Login</button>
                <button class="btn btn-primary" @onclick="(() => SetLoginPage(LoginPages.StartPage))">MainSide</button>
            
        </EditForm>
        break;
    case LoginPages.AddUser:
        <EditForm EditContext=userAddContext OnValidSubmit=AddUserHandleValidSubmit>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">


                <div class="col-md-5">
                    <label for="Name">Name:</label>
                    <InputText id="Name" @bind-Value="userAddModel.Name" class="form-control" />
                    

                    <label for="Email">Email:</label>
                    <InputText id="Email" @bind-Value="userAddModel.Email" class="form-control" />

                    <label for="Password">Password:</label>
                    <InputText id="Password" @bind-Value="userAddModel.Password" class="form-control" />
                    
                    <label for="Tlf">Tlf:</label>
                    <InputNumber id="Tlf" @bind-Value="userAddModel.Phone" class="form-control" />
                    
                    <label for="Birthday">Birthday:</label>
                    <InputDate id="Birthday" @bind-Value="userAddModel.Birthday" class="form-control" />
                   
                </div>

                 <div class="col-md-5">
                    @foreach (var item in competenceCheckBoxes)
                    {
                         <br>
                         <li>
                             <label>@((Competences)item.CompetenceIndex)</label>
                             <InputCheckbox @bind-Value="item.HaveCompetenceFlag" />
                         </li>
                    }
                 </div>
            </div>

            <button type="submit" class="btn btn-primary">Lav frivllig konto</button>
            <button class="btn btn-primary" @onclick="(() => SetLoginPage(LoginPages.StartPage))">MainSide</button>
            <h3>@userAddMessage</h3>
        </EditForm>
        break;
}

@code {

    public LoginPages loginPage;


    private Competences competence;
    private List<CompetenceCheckBox> competenceCheckBoxes = new List<CompetenceCheckBox>();

    /// <summary>
    /// Hvem der er logget ind på hjemmesiden.
    /// </summary>
    public static User UserLogedin { get; set; }
    private LoginModel loginModel = new LoginModel();
    private string userLoginMessage;





    //For opret user
    private EditContext userAddContext;
    private UserModel userAddModel = new UserModel();

    [Inject]
    public IUserService UserService { get; set; }
    private List<User> users = new List<User>();

    private string userAddMessage;

    protected override void OnInitialized()
    {
        //Resetter den statics variable for at den ikke stadig har det samme login
        //F.eks. hvis man går tilbage med browser tilbage knappen
        UserLogedin = null;

        userAddModel = new UserModel();
        userAddContext = new EditContext(userAddModel);


        //"Adder" alle competence der findes og sættes i en liste, der vises visuelt med checkbox og competences navn.
        for (var i = 0; i < 7; i++)
        {
            competenceCheckBoxes.Add(new CompetenceCheckBox(i, false));
        }


        //Besked, hvis der ikke findes nogen "user" med det login.

        userLoginMessage = string.Empty;
        userAddMessage = string.Empty;
        //Ændre  navigations knapper i venstre side, til "forsiden".
        NavMenu.NavMenuChange(NavigateMenus.MainSide);
    }
    protected override async Task OnInitializedAsync()
    {
        users = (await UserService.GetAllUsers()).ToList();
    }


    /// <summary>
    /// Vise, hvilken udsende der skal vises på loginpage.
    /// </summary>
    /// <param name="startPage"></param>
    public void SetLoginPage(LoginPages startPage)
    {
        NavMenu.NavMenuChange(NavigateMenus.MainSide);
        this.loginPage = startPage;
        userAddMessage = string.Empty;
    }



    public void UserLogin(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid)
        {
            foreach (var userLooping in users)
            {
                if (userLooping.Email == loginModel.Email && userLooping.Password == loginModel.Password)
                {
                    UserLogedin = userLooping;
                    break;
                }
            }
            if (UserLogedin != null)
            {
                if (UserLogedin.Type_id == 2)
                {
                    NavManager.NavigateTo("/volenteerOwnPage");
                }
                else
                {
                    NavManager.NavigateTo("/coordinatorOwnPage");

                }
            }
            else
            {
                userLoginMessage = "Not found user";
            }
        }
    }
    public async Task AddUserHandleValidSubmit()
    {
        bool foundDuplicate = false;
        foreach (var item in users)
        {
            if (item.Email == userAddModel.Email)
            {
                foundDuplicate = true;
                userAddMessage = "Email findes allerede";
            }
        }
        if (foundDuplicate == false)
        {
            Console.WriteLine("Hello handle Valid");
            User userAdd = new User();
            userAdd.Name = userAddModel.Name;
            userAdd.Birthday = userAddModel.Birthday;
            userAdd.Email = userAddModel.Email;
            userAdd.Phone = userAddModel.Phone;
            userAdd.Password = userAddModel.Password;

            //Alle checkbox der har et "flueben" vil deres competence_Id blive addet til databasen.
            //Til userens kompetencer
            foreach (var item in competenceCheckBoxes)
            {
                if (item.HaveCompetenceFlag)
                {
                    //Den siger +1, fordi C#/ i denne applikation starter alt fra 0, men pgadmin/sql starter alt fra 1 i tables.
                    userAdd.Competences_Id.Add(item.CompetenceIndex + 1);
                }
            }

            userAddMessage = "Frivillig bruger er lavet";
            await UserService.AddUser(userAdd);
            users = (await UserService.GetAllUsers()).ToList();
        }

    }
}
