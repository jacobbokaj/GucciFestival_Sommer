@using GucciFestival.Client.Models
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@using Nito.AsyncEx;
@inject NavigationManager NavManager
@page "/login"
@using GucciFestival.Shared;



@if(sideOpret == null)
{
    <h3> Login in</h3>
        <button @onclick="(()=>SetSide(true))" class="btn-outline-primary">log in</button>
        <button @onclick="(()=>SetSide(false))" class="btn-outline-primary">opret bruger</button>


    



}else if (sideOpret == true)
{
    <h3>Log in </h3>
    <EditForm EditContext=@editContextCreateUser 
     OnValidSubmit=@HandleValidSubmit OnInvalidSubmit=@HandleInvalidSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />

        <div class="col-3 mb-4">
            <label for="Email">Email:</label>
            <InputText id="Email" @bind-Value="userModel.Email" class="form-control" />
        </div>

        <div class="col-4 mb-4">
            <label for="Password">Password:</label>
            <InputText id="Password" @bind-Value="userModel.Password" class="form-control"/>
        </div>

        


        <button type="submit" class="btn-outline-primary">Login</button>

        <button type="submit" class="btn-outline-primary">Change navmenu</button>
    </EditForm>

}else if(sideOpret == false)
{
    
        <h4>@userLoginMessage</h4>
        <EditForm EditContext=@editContextCreateUser 
         OnValidSubmit=@HandleValidSubmit OnInvalidSubmit=@HandleInvalidSubmit>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-3 mb-4">
	      <label for="Name">Name:</label>
	      <InputText id="Name" @bind-Value="userModel.Name" class="form-control"/>
        </div>
        <div class="col-3 mb-4">
            <label for="Email">Email:</label>
            <InputText id="Email" @bind-Value="userModel.Email" class="form-control" />
        </div>

        <div class="col-4 mb-4">
            <label for="Password">Password:</label>
            <InputText id="Password" @bind-Value="userModel.Password" class="form-control"/>
        </div>

        
        <div class="col-4 mb-4">
            <label for="Tlf">Tlf:</label>
            <InputNumber id="Tlf" @bind-Value="userModel.Tlf" class="form-control" />
        </div>
        <div class="col-4 mb-3">
            <label for="Birthday">Birthday:</label>
            <InputDate id="Birthday" @bind-Value="userModel.Birthday" class="form-control"/>
        </div>
        
        <button type="submit" class="btn-outline-primary">Login</button>

        <button type="submit" class="btn-outline-primary">Change navmenu</button>

        </EditForm>
    //opret side 








}



    @*<button @onsubmit=@(async () => await UserAdd())>Add user</button>*@
@code {



    private List<User> users = new List<User>();
    private bool? sideOpret;




    private UserModel userModel = new UserModel();
    //For opret
    private string userLoginMessage;
    private EditContext editContextCreateUser;

    //login
    private EditContext editContextLogin;

    private User userTarget = new User();
    //Useless
    [Inject]
    public IUserService UserService { get; set; }


    protected override void OnInitialized()
    {
        sideOpret = null;
        editContextCreateUser = new EditContext(userModel);
        userLoginMessage = string.Empty;

        users.Add(new User());
        users[0].Name = "Kimmi";
        users[0].Email = "kimmmmii@h";
    }
    protected override async Task OnInitializedAsync()
    {
        //users = (await UserService.GetAllUsers()).ToList();      
    }



















    public void SetSide(bool? flag)
    {
        sideOpret = flag;
    }





















    //Ikke tænk på det.




    private void ChangeSide()
    {
        NavMenu.ChangeSideFlag();
    }

    public void UserLogin()
    {
        userTarget = null;
        Console.WriteLine("List User: " + users.Count);
        foreach (var userLooping in users)
        {
            Console.WriteLine("Email userloop: " + userLooping.Email + "Email usermodel: " + userModel.Email + " password userloop: " + userLooping.Password + " password usermodel " + userModel.Password);
            if (userLooping.Email == userModel.Email &&
                userLooping.Password == userModel.Password)
            {
                userTarget = userLooping;
                break;
            }
        }
        NavManager.NavigateTo("/userownside");
        userLoginMessage = userTarget != null ? "Found user" : "Not found user";
    }


    public async Task UserAdd()
    {
        Console.WriteLine("Start add user");
        User user = new User(userModel.Name, userModel.Email,userModel.Birthday,
                             userModel.Tlf,userModel.Password,/*Placeholder Comptence*/2,
                                /*User_id*/7,1,"default");
        await UserService.AddUser(user);
    }

    public void HandleValidSubmit()
    {
        Console.WriteLine("Hello handle Valid");
        UserLogin();
       // ChangeSide();
    }
    public void HandleInvalidSubmit()
    {
        Console.WriteLine("Hello handle not valid");
    }
}
