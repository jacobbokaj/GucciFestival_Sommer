@page "/coordinatorOwnPage"
@using GucciFestival.Shared.Competences;
@using GucciFestival.Shared.CoordinatorPages;
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@using GucciFestival.Shared.NavigateMenus;
@inject NavigationManager NavManager


<h3>CoordinatorOwnPage</h3>
@*<button @onclick=NavigateToSideProfil>Profil</button>
<button @onclick="(() => SetShiftTarget(null,CoordinatorOwnPages.ShiftsAvailable))">Vagter Ledige</button>
<button @onclick="(() => SetShiftTarget(null,CoordinatorOwnPages.ShiftsTaken))">Vagter taget</button>
<button @onclick="(() => SetShiftTarget(null,CoordinatorOwnPages.Volenteers))">Frivillige</button>*@

<button @onclick="(() => NewNavMenu(NavigateMenus.Coordinator))">Nav menu test</button>
<button @onclick=CreateUser>Add user</button>
@if (shifts.Count == 0)
{

}
else
{
    @switch (page)
    {
        case CoordinatorPages.ShiftsAvailable:
            <table class="table">
                <thead>
                    <tr>
                        <th>Vagt navn</th>
                        <th>Kompetence</th>
                        <th>Start dato</th>
                        <th>Slut dato</th>
                        <th>Se vagt</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in shifts)
                    {
                        <tr>
                            <td>@forecast.Name</td>
                            <td>@((Competences)forecast.Competence_Id))</td>
                            <button @onclick="(() => SetShiftTarget(forecast,CoordinatorPages.ShiftRead))">Se vagt</button>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case CoordinatorPages.ShiftsTaken:
            <table class="table">
                <thead>
                    <tr>
                        <th>Vagt navn</th>
                        <th>Frivilliges navn</th>
                        <th>Kompetence</th>
                        <th>Start dato</th>
                        <th>Slut dato</th>
                        <th>Se vagt</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in shifts)
                    {
                        <tr>
                            <td>@forecast.Name</td>
                            <td>@((Competences)forecast.Competence_Id))</td>
                            <button @onclick="(() => SetShiftTarget(forecast,CoordinatorPages.ShiftRead))">Se vagt</button>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case CoordinatorPages.Volenteers:

            <EditForm Model=@volenteer>
                 
                    <InputSelect id="Competence" @bind-Value="competences">
                        @foreach (var item in competenceArray)
                       {
                           <option>@item</option>
                       }
                    </InputSelect>
                
            </EditForm>
            <table class="table">
                <thead>
                    <tr>
                        <th>FrivilligeNavn</th>
                        <th>Kompetence</th>
                        <th>Fødselsdag</th>
                        <th>Tlf</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in volenteers)
                    {
                        <tr>
                            <td>@forecast.Name</td>
                           @* <td>@((Competences)forecast.Competence_id)</td>*@
                        </tr>
                    }
                </tbody>
            </table>


            break;
        case CoordinatorPages.VolenteersRead:
            <div>

                <h4>Frivilliges info  @volenteer.Name</h4>

                <h3>Start dato</h3>
                <h3>@shiftTarget.Start_Date</h3>

                <h3>Slut dato</h3>
                <h3>@shiftTarget.End_Date</h3>

                <h3>Description</h3>
                <h3>@shiftTarget.Description</h3>


            </div>
            break;
        case CoordinatorPages.ShiftRead:
            <div>
                <h4>Shift name @shiftTarget.Name</h4>

                <h3>Start dato></h3>
                <h3>@shiftTarget.Start_Date</h3>

                <h3>Slut dato</h3>
                <h3>@shiftTarget.End_Date</h3>

                <h3>Description</h3>
                <h3>@shiftTarget.Description</h3>
            </div>


            <EditForm Model=@shiftModel class="row p-3">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="col-md-12 mb-3">
                <label for="Name">Name</label>
                <InputText id="Name" @bind-Value="shiftModel.Name" class="form-control"/>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="StartData">Start dato</label>
                    <InputDate @bind-Value=shiftTarget.Start_Date/>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="EndDate">Slut dato</label>
                    <InputDate @bind-Value=shiftTarget.End_Date/>
                </div>
                    <InputSelect id="Competence" @bind-Value="competences">
                        @foreach (var item in competenceArray)
                       {
                           <option>@item</option>
                       }
                    </InputSelect>
                <div>

                </div>

            </EditForm>

            
            break;

    }
}
@code {




    private CoordinatorPages page;

    /// <summary>
    /// Den frillige brugers her og får dataen ved hjælp af "blazored.localstorage"
    /// Den frillige localstorage ved sat ind, da den frillige loggede ind.
    /// </summary>
    private User volenteerTarget = new User();
    /// <summary>
    /// What shift is taken from the list and will be checked out.
    /// </summary>
    private Shift shiftTarget = new Shift();

    private Shift shiftModel = new Shift();
    private List<Shift> shifts = new List<Shift>();

    private User volenteer = new User();
    private List<User> volenteers = new List<User>();



    private Competences competences;
    private string[] competenceArray = new string[7] { Competences.Førstehjælpskursus.ToString(),Competences.Elektriker.ToString(),
                                                       Competences.Tømrer.ToString(),Competences.Kørekort.ToString(),Competences.Rengøring.ToString(),
                                                        Competences.KøkkenErfaring.ToString(),Competences.ServiceErfaring.ToString()};




    //Shift Information
    private EditContext editContextShiftInfo;



    private static Action<CoordinatorPages> pagesEvent;




    [Inject]
    public IUserService VolenteerService { get; set; }

    [Inject]
    public IShiftService ShiftService { get; set; }
    protected override async Task OnInitializedAsync()
    {

        ////Henter alle vagter der findes på pgadmin/sql databasen.
        shifts = (await ShiftService.GetAllShifts()).ToList();
        ////Henter den frilliges data, der blev gemt da den frillige loggede ind.
        //volenteerTarget = await localStore.GetItemAsync<User>("volenteer");
        volenteers = (await VolenteerService.GetAllUsers()).ToList();
    }
    protected override void OnInitialized()
    {
        pagesEvent = PageChange;
    }

    private async void CreateUser()
    {
        await VolenteerService.AddUser(volenteer);
    }



    private void SetShiftTarget(Shift shift, CoordinatorPages page)
    {
        shiftTarget = shift;
        this.page = page;

        Console.WriteLine("vagt info");

    }
    private void CheckVolenteer(User volenteer)
    {

    }


    private void NewNavMenu(NavigateMenus navigateMenu)
    {

        NavMenu.ChangeSideFlag(navigateMenu);
        StateHasChanged();
    }
    private void NavigateToSideProfil()
    {
        NavManager.NavigateTo("/profil");
    }

    public static void ButtonPage(CoordinatorPages pages)
    {
        pagesEvent?.Invoke(pages);
    }


    public void PageChange(CoordinatorPages pages)
    {
        if (NavManager.Uri != (NavManager.BaseUri.ToString() + "coordinatorOwnPage"))
        {
            NavManager.NavigateTo("/coordinatorOwnPage");
        }
        Console.WriteLine("New coordinator page");
        page = pages;
        StateHasChanged();
    }
}
