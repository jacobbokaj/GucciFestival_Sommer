@page "/coordinatorOwnPage"
@using GucciFestival.Client.EditformModels
@using GucciFestival.Shared.Competences;
@using GucciFestival.Shared.CoordinatorPages;
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@using GucciFestival.Shared.NavigateMenus;
@inject NavigationManager NavManager


@if (Login.UserLogedin == null)
{
    <h1>Ikke logget ind på en coordinator</h1>
}
else
{
    <h3> Din bruger:  <small>@Login.UserLogedin.Name </small></h3>
    <br>

    @switch (coordinatorPage)
    {
        case CoordinatorPages.ShiftAdd:
            <EditForm Model=@shiftModel Context="formContext">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="row">
                <div class="col-md-5">
                <label for="Name">Navn</label>
                <InputText id="Name" @bind-Value="shiftModel.Name" class="form-control"/>
                <br>
                    <label for="StartData">Vagt starter: </label>
                    <InputDate @bind-Value=shiftModel.Start_Time/>
                <br>
                <br/>
                    <label for="EndDate">Vagt slutter: </label>
                    <InputDate @bind-Value=shiftModel.End_Time/>
                <br>
                <br>
                    <InputSelect class="btn-outline-primary" id="Competence" @bind-Value="competences">
                        @foreach (var item in competenceArray)
                       {
                           <option>@item</option>
                       }
                    </InputSelect>
                
                </div>    
                </div>
                <br>
                    <button class="btn btn-primary" @onclick="(() =>ShiftAdd(formContext))">Tilføj vagt</button>
                
            </EditForm>
            break;
        case CoordinatorPages.ShiftsAvailable:
            <table class="table">
                <thead>
                    <tr>
                        <th>Vagt navn</th>
                        <th>Kompetence</th>
                        <th>Start dato</th>
                        <th>Slut dato</th>
                        <th>Se vagt</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in shifts)
                    {
                        if(GetShiftTakenFlag(forecast) == false)
                        {                       
                            <tr>
                                <td>@forecast.Name</td>
                                <td>@((Competences)(forecast.Competence_Id))</td>
                                <td>@forecast.Start_Time</td>
                                <td>@forecast.End_Time</td>
                                <button class="btn btn-primary" @onclick="(() => SetShiftTarget(forecast,CoordinatorPages.ShiftRead))">Se vagt</button>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            break;
        case CoordinatorPages.ShiftsTaken:
            <table class="table">
                <thead>
                    <tr>
                        <th>Vagt navn</th>
                        <th>Frivilliges navn</th>
                        <th>Kompetence</th>
                        <th>Start dato</th>
                        <th>Slut dato</th>
                        <th>Se vagt</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in shifts)
                    {
                        @if (GetShiftTakenFlag(forecast))
                        {                      
                            <tr>
                                <td>@forecast.Name</td>
                                <td>@GetVolenteerName(forecast.Shift_Taken_Id)</td>
                                <td>@((Competences)(forecast.Competence_Id))</td>
                                <td>@forecast.Start_Time</td>
                                <td>@forecast.End_Time</td>
                                <button class="btn btn-primary" @onclick="(() => SetShiftTarget(forecast,CoordinatorPages.ShiftRead))">Se vagt</button>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            break;
        case CoordinatorPages.Volenteers:

            <EditForm Model=@volenteer>
                 
                    <InputSelect class="btn btn-primary" id="Competence" @bind-Value="competences">
                        @foreach (var item in competenceArray)
                       {
                           <option>@item</option>
                       }
                    </InputSelect>
                
            </EditForm>
            <table class="table">
                <thead>
                    <tr>
                        <th>FrivilligeNavn</th>
                        <th>Fødselsdag</th>
                        <th>Tlf</th>
                        <th>Email</th>
                        <th>Kompetence</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in volenteers)
                    {
                        if (VolenteerHaveCompetence(forecast,competences))
                        {                   
                            <tr>
                                <td>@forecast.Name</td>
                                <td>@forecast.Birthday</td>
                                <td>@forecast.Phone</td>
                                <td>@forecast.Email</td>
                               <td>@competences</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>


            break;
        case CoordinatorPages.VolenteersRead:
            <div>

                <h4>Frivilliges info  @volenteer.Name</h4>

                <h3>Start dato</h3>
                <h3>@shiftTarget.Start_Time</h3>

                <h3>Slut dato</h3>
                <h3>@shiftTarget.End_Time</h3>

                
               


            </div>
            break;
        case CoordinatorPages.ShiftRead:
            <EditForm Model=@shiftModel Context="formContext">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="row">
                <div class="col-md-5">
                <label for="Name">Name</label>
                <InputText id="Name" @bind-Value="shiftModel.Name" class="form-control"/>
                <br>

                    <label for="StartData">Start dato</label>
                    <InputDate @bind-Value=shiftModel.Start_Time/>
                <br>
                <br>
                    <label for="EndDate">Slut dato</label>
                    <InputDate @bind-Value=shiftModel.End_Time/>
                <br>
                <br>
                    <InputSelect class="btn-outline-primary" id="Competence" @bind-Value="competences">
                        @foreach (var item in competenceArray)
                       {
                           <option>@item</option>
                       }
                    </InputSelect>
                
                    <br>


                        @if (ShiftTakenCheck())
                        {
                            
                            <label>Frivilliges navn: @volenteer.Name</label>
                            
                        }               
                </div>
                </div>
                <br>
                <button class="btn btn-primary" type="submit" @onclick="(() => ShiftUpdate(formContext))">Gem</button>
                <button class="btn btn-primary" type="submit" @onclick="(() =>ShiftDelete(formContext))">Slet</button>
            </EditForm>

            
            break;

    }
}
@code {

    private CoordinatorPages coordinatorPage;

    /// <summary>
    /// Den frillige brugers her og får dataen ved hjælp af "blazored.localstorage"
    /// Den frillige localstorage ved sat ind, da den frillige loggede ind.
    /// </summary>
    private User volenteerTarget = new User();
    /// <summary>
    /// What shift is taken from the list and will be checked out.
    /// </summary>
    private Shift shiftTarget = new Shift();

    private ShiftModel shiftModel = new ShiftModel();
    private List<Shift> shifts = new List<Shift>();

    private User volenteer = new User();
    private List<User> volenteers = new List<User>();


    //Bruges til dropdown menu.
    private Competences competences;
    private string[] competenceArray = new string[7] { Competences.Førstehjælpskursus.ToString(),Competences.Elektriker.ToString(),
                                                       Competences.Tømrer.ToString(),Competences.Kørekort.ToString(),Competences.Rengøring.ToString(),
                                                        Competences.KøkkenErfaring.ToString(),Competences.ServiceErfaring.ToString()};



    /// <summary>
    /// Giver adgang til at navmenu kan "styre", hvilken coordinator side det skal være, ved hjælp af navigations knapperne i venstre side.
    /// Denne delegate gør det muligt at kalde fra en static metode til en ikke static metode. Ved hjælp af "PageChange" metoden bliver subscribede til den.
    /// </summary>
    private static Action<CoordinatorPages> coordinatorPagesEvent;

    [Inject]
    public IUserService VolenteerService { get; set; }

    [Inject]
    public IShiftService ShiftService { get; set; }
    protected override async Task OnInitializedAsync()
    {

        ////Henter alle vagter der findes på pgadmin/sql databasen.
        shifts = (await ShiftService.GetAllShifts()).ToList();

        ////Henter den frilliges data, der blev gemt da den frillige loggede ind.
        //volenteerTarget = await localStore.GetItemAsync<User>("volenteer");
        //  shiftTarget = shifts[0];
        List<User> volenteersTemp = new List<User>();
        volenteersTemp = (await VolenteerService.GetAllUsers()).ToList();       
        foreach (var item in volenteersTemp)
        {
            if (item.Type_id == 2)
            {
                volenteers.Add(item);
            }
        }
    }
    protected override void OnInitialized()
    {
        //Her subsriber "pageChange". Der gør når "coordinatorPagesEvent" invoker bliver PageChange kaldt.
        coordinatorPagesEvent = PageChange;
        NavMenu.NavMenuChange(NavigateMenus.Coordinator);

    }

    private async void CreateUser()
    {
        await VolenteerService.AddUser(volenteer);
    }


    public string GetVolenteerName(int shift_taken_id)
    {
        for (var i = 0; i < volenteers.Count; i++)
        {
            if (shift_taken_id == volenteers[i].User_id)
            {
                return volenteers[i].Name;
            }
        }
        return "default";
    }


    public bool VolenteerHaveCompetence(User vol, Competences comp)
    {
        foreach (var item in vol.Competences_Id)
        {
            if (item == (int)comp)
            {
                return true;
            }
        }
        return false;
    }


    private bool GetShiftTakenFlag(Shift shift){

        return shift.Shift_Taken_Id != -1 ? true : false;
    }


    private void SetShiftTarget(Shift shift, CoordinatorPages page)
    {
        shiftTarget = shift;
        this.coordinatorPage = page;

        Console.WriteLine("vagt info");
        if(shiftTarget != null)
        {
            ShiftModelInsetValues();            
        }
    }

    /// <summary>
    /// flag = true: få alle vagter der er taget.
    /// flag = false: fir ledige vagter.
    /// </summary>
    /// <param name="flag"></param>
    private List<User> GetAllSpecificShift(bool flag)
    {
        foreach (var item in volenteers)
        {
            if(item.User_id == 2){}
        }
        return null;
    }

    private void ShiftModelInsetValues()
    {
        shiftModel.Name = shiftTarget.Name;    
        shiftModel.Start_Time = shiftTarget.Start_Time;
        shiftModel.End_Time = shiftTarget.End_Time;
        competences = (Competences)shiftTarget.Competence_Id;
    }


    private async Task ShiftAdd(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid)
        {

            Shift shiftAdd = new Shift();
            shiftAdd.Name = shiftModel.Name;
            //+1 fordi pgadmin/sql tabeller starter fra 1 og C#/ denne applikation starter det fra 0.
            shiftAdd.Competence_Id = ((int)competences) + 1;

            //newShift_Id gør at den nye shift får det højste i id.
            int newShift_Id = 0;
            foreach (var item in shifts)
            {
                if(item.Shift_Id > newShift_Id)
                {
                    newShift_Id = item.Shift_Id;
                }
            }
            //Den siger +1, fordi C#/ i denne applikation starter alt fra 0, men pgadmin/sql starter alt fra 1 i tables.
            shiftAdd.Shift_Id = newShift_Id + 1;
            //-1 står for at vagten ikke er taget.
            shiftAdd.Shift_Taken_Id = -1;
            shiftAdd.Start_Time = shiftModel.Start_Time;
            shiftAdd.End_Time = shiftModel.End_Time;

            ShiftService.AddShift(shiftAdd);
            shifts = (await ShiftService.GetAllShifts()).ToList();
        }
    }
    private void ShiftUpdate(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();
        if (formIsValid)
        {          
            Shift shift_update = new Shift();

            shift_update = shiftTarget;
            shift_update.Name = shiftModel.Name;
            shift_update.Start_Time = shiftModel.Start_Time;
            shift_update.End_Time = shiftModel.End_Time;
            //+1 fordi pgadmin/sql tabeller starter fra 1 og C#/ denne applikation starter det fra 0.
            shift_update.Competence_Id = (int)competences + 1;



            ShiftService.UpdateShift(shift_update);
        }
    }
    private void ShiftDelete(EditContext formContext)
    {
        bool formIsValid = formContext.Validate();

        if (formIsValid)
        {

            ShiftService.DeleteShift(shiftTarget);
            //Går tilbage til ledige vagter listen, fordi den vagt der bliver kigget på blev slettet.
            coordinatorPage = CoordinatorPages.ShiftsAvailable;
        }
    }

    private bool ShiftTakenCheck()
    {
        //-1 er sat til ikke taget, alt over -1 er et user_id. Dog undtagen 0, fordi pgadmin/sql starter fra 1 i tabeller.
        if (shiftTarget.Shift_Taken_Id != -1)
        {
            foreach (var item in volenteers)
            {
                if(item.User_id == shiftTarget.Shift_Taken_Id)
                {
                    return true;
                }
            }
        }
        return false;
    }

    private void NavigateToSideProfil()
    {
        NavManager.NavigateTo("/profil");
    }

    /// <summary>
    /// Bliver kaldt på kun i navmenu, for at navigations knapper i venstre side kan bruges til noget.
    /// </summary>
    /// <param name="page"></param>
    public static void NavigateToVolenteerPage(CoordinatorPages page)
    {
        coordinatorPagesEvent?.Invoke(page);
    }

    /// <summary>
    /// Denne metode bliver kaldt på når coordinatorPagesEvent invoker.
    /// "NavigateToVolenteerPage" gør den invoke.
    /// Statics metoder kan ikke kalde på ikke statics metoder eller ikke statics variabler. Som gør vi bruger delegates.
    /// </summary>
    /// <param name="page"></param>
    public void PageChange(CoordinatorPages page)
    {
        if (NavManager.Uri != (NavManager.BaseUri.ToString() + "coordinatorOwnPage"))
        {
            NavManager.NavigateTo("/coordinatorOwnPage");
        }
        Console.WriteLine("New coordinator page");

        if(page == CoordinatorPages.ShiftAdd)
        {
            shiftModel = new ShiftModel();
        }

        coordinatorPage = page;
        StateHasChanged();
    }
}
