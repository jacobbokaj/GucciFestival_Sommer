@page "/volenteerOwnPage"
@using GucciFestival.Shared.Competences;
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@using GucciFestival.Shared.NavigateMenus;
@using GucciFestival.Shared.VolenteerPages;
@inject NavigationManager NavManager
@if(Login.UserLogedin == null){
    <h1>Ikke logget ind på en frivillige</h1>
}
else
{
    <h3> Din bruger: <small> @Login.UserLogedin.Name </small> </h3>
    <br>
    @switch (volenteerPage)
    {
        case VolenteerPages.ShiftsAvailable:
                <table class="table">
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Kompetence</th>
                            <th>Start dato</th>
                            <th>Slut dato</th>
                            <th>Tag vagt</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in GetShiftsSpecific(false,-1))
                        {
                        if (VolenteerHaveCompetence(forecast))
                        {
                            <tr>
                                <td>@forecast.Name  </td>
                                <td>@((Competences)forecast.Competence_Id)</td>
                                <td>@forecast.Start_Time</td>
                                <td>@forecast.End_Time</td>
                                <button @onclick="(()=>SetShiftTarget(forecast,VolenteerPages.ShiftAvailableRead))" class="btn btn-primary">Tag vagt</button>
                            </tr>
                            
                        }
                        }
                    </tbody>
                </table>
            break;
        case VolenteerPages.ShiftAvailableRead:

            <div>
                <h5> Vagtens navn:</h5>
                <h6>@shiftTarget.Name</h6>
                <br>
                <h5>Denne vagt starter:</h5>
                <h6>@shiftTarget.Start_Time</h6>
                <br>
                <h5>Denne vagt slutter</h5>
                <h6>@shiftTarget.End_Time</h6>
                <br>
          
                <h5>Hvis du vil tage vagten, markere boxen: </h5>     
                
                <input type="checkbox" @bind=shiftTakeCheckBoksFlag/>
                <button class="btn btn-primary" @onclick=TakeShift>Tag vagten</button>
            </div>

            break;

        case VolenteerPages.ShiftsOwn:
                 <table class="table">
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Kompetence</th>
                            <th>Start dato</th>
                            <th>Slut dato</th>
                        </tr>
                         @foreach (var forecast in GetShiftsSpecific(true,Login.UserLogedin.User_id))
                        {
                            <tr>
                                <td>@forecast.Name</td>
                                <td>@((Competences)forecast.Competence_Id)</td>
                                <td>@forecast.Start_Time</td>
                                <td>@forecast.End_Time</td>
                            </tr>
                        }
                    </thead>
                </table>
            break;
    }
}
@code {

    private VolenteerPages volenteerPage;

    /// <summary>
    /// Brugt til checkboks, checke om "user"/frivllig er sikker på at tage vagten
    /// </summary>
    private bool shiftTakeCheckBoksFlag;

    /// <summary>
    /// Den frillige brugers her og får dataen ved hjælp af "blazored.localstorage"
    /// Den frillige localstorage ved sat ind, da den frillige loggede ind.
    /// </summary>
    private User volenteerTarget = new User();
    /// <summary>
    /// What shift is taken from the list and will be checked out.
    /// </summary>
    private Shift shiftTarget = new Shift();
    private List<Shift> shifts = new List<Shift>();






    /// <summary>
    /// Giver adgang til at navmenu kan "styre", hvilken coordinator side det skal være, ved hjælp af navigations knapperne i venstre side.
    /// Denne delegate gør det muligt at kalde fra en static metode til en ikke static metode.
    /// </summary>
    private static Action<VolenteerPages> volenteerPagesEvent;





    [Inject]
    public IShiftService ShiftService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //Henter alle vagter der findes på pgadmin/sql databasen.
        shifts = (await ShiftService.GetAllShifts()).ToList();
        //Henter den frilliges data, der blev gemt da den frillige loggede ind.

    }


    protected override void OnInitialized()
    {
        volenteerPagesEvent = PageChange;
        NavMenu.NavMenuChange(NavigateMenus.Volenteer);
    }



    public bool VolenteerHaveCompetence(Shift vol)
    {
        foreach (var item in Login.UserLogedin.Competences_Id)
        {
            if (item == vol.Competence_Id)
            {
                return true;
            }
        }
        return false;
    }


    /// <summary>
    /// flag = true, alle vagter denne bruger har taget.
    /// flag = false, alle ledige vagter
    /// </summary>
    /// <param name="flag"></param>
    /// <returns></returns>
    private List<Shift> GetShiftsSpecific(bool flag, int user_id)
    {
        List<Shift> list = new List<Shift>();
        foreach (var item in shifts)
        {
            Console.WriteLine(item.Shift_Taken_Id + " user_id: " + user_id);
            if(item.Shift_Taken_Id == user_id && flag)
            {
                list.Add(item);
            }else if(item.Shift_Taken_Id == -1 && flag == false)
            {
                list.Add(item);
            }
        }
        return list;
    }






    private async Task TakeShift()
    {
        if (shiftTakeCheckBoksFlag)
        {
            shiftTarget.Shift_Taken_Id = Login.UserLogedin.User_id;
            await   ShiftService.UpdateShift(shiftTarget);
            foreach (var item in shifts)
            {
                if(item.Shift_Id == shiftTarget.Shift_Id)
                {
                    item.Shift_Taken_Id = volenteerTarget.User_id;
                }
            }
            SetShiftTarget(null,VolenteerPages.ShiftsOwn);

            shifts = (await ShiftService.GetAllShifts()).ToList();
            shiftTakeCheckBoksFlag = false;
        }
        
    }
    /// <summary>
    /// Hvilken vagt oplysninger der bliver kigget på.
    /// </summary>
    /// <param name="shift"></param>
    /// <param name="page"></param>
    private void SetShiftTarget(Shift shift,VolenteerPages page)
    {
        shiftTarget = shift;
        this.volenteerPage = page;
        Console.WriteLine("vagt info");
        Console.WriteLine("VolenteerPages: " + volenteerPage);

    }

    private void NavigateToSideProfil()
    {
        NavManager.NavigateTo("/profil");
    }
    /// <summary>
    /// Bliver kaldt på kun i navmenu, for at navigations knapper i venstre side kan bruges til noget.
    /// </summary>
    /// <param name="page"></param>
    public static void NavigateToVolenteerPage(VolenteerPages page)
    {

        volenteerPagesEvent?.Invoke(page);
    }


    /// <summary>
    /// Denne metode bliver kaldt på når volenteerPagesEvent invoker.
    /// "NavigateToVolenteerPage" gør den invoke.
    /// Statics metoder kan ikke kalde på ikke statics metoder eller ikke statics variabler. Som gør vi bruger delegates.
    /// </summary>
    /// <param name="page"></param>
    private void PageChange(VolenteerPages page)
    {
        if (NavManager.Uri != (NavManager.BaseUri.ToString() + "volenteerOwnPage"))
        {
            NavManager.NavigateTo("/volenteerOwnPage");
        }
        SetShiftTarget(null, page);     
        StateHasChanged();
    }
}
