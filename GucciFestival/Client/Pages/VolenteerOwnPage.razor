@page "/volenteerOwnPage"
@using GucciFestival.Shared.Competences;
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@inject NavigationManager NavManager
@using GucciFestival.Shared.VolenteerPages;
@*<button @onclick=NewNavMenu>Nav menu test</button>
<button @onclick="(() => SetShiftTarget(null,VolenteerPages.ShiftsOwn))">Egen vagter</button>
<button @onclick="(() => SetShiftTarget(null,VolenteerPages.ShiftsAvailable))">Vagter ledige</button>*@
@if(Login.UserLogedin == null){
    <h1>Ikke logget ind på en frivillige</h1>

}
else
{
    <h3>Frivlliges Navn:@Login.UserLogedin.Name </h3>

    @switch (volenteerPages)
    {
        case VolenteerPages.ShiftsAvailable:
                <table class="table">
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Kompetence</th>
                            <th>Start dato</th>
                            <th>Slut dato</th>
                            <th>Tag vagt</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in GetShiftsSpecific(false,-1))
                        {
                            <tr>
                                <td>@forecast.Name  </td>
                                <td>@((Competences)forecast.Competence_Id)</td>
                                <td>@forecast.Start_Date</td>
                                <td>@forecast.End_Date</td>
                                <button @onclick="(() => SetShiftTarget(forecast,VolenteerPages.ShiftAvailableRead))">Tag vagt</button>
                            </tr>
                        }
                    </tbody>
                </table>
            break;
        case VolenteerPages.ShiftAvailableRead:

            <div>
                <h4>Shift name @shiftTarget.Name</h4>

                <h3>Start dato></h3>
                <h3>@shiftTarget.Start_Date</h3>

                <h3>Slut dato</h3>
                <h3>@shiftTarget.End_Date</h3>

                <h3>Description</h3>
               
                
                <h3>Sikker på at tage vagten?</h3>      
                <input type="checkbox" @bind=shiftTakeCheckBoksFlag/>
                <button @onclick=TakeShift>Tag vagten</button>
            </div>

            break;

        case VolenteerPages.ShiftsOwn:
                 <table class="table">
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Kompetence</th>
                            <th>Start dato</th>
                            <th>Slut dato</th>
                        </tr>
                         @foreach (var forecast in GetShiftsSpecific(true,0))
                        {
                            <tr>
                                <td>@forecast.Name</td>
                                <td>@((Competences)forecast.Competence_Id)</td>
                                <td>@forecast.Start_Date</td>
                                <td>@forecast.End_Date</td>
                            </tr>
                        }
                    </thead>
                </table>
            break;
    }
}
@code {


    /// <summary>
    /// Brugt til checkboks, checke om "user"/frivllig er sikker på at tage vagten
    /// </summary>
    private bool shiftTakeCheckBoksFlag;

    private VolenteerPages volenteerPages;
    /// <summary>
    /// Den frillige brugers her og får dataen ved hjælp af "blazored.localstorage"
    /// Den frillige localstorage ved sat ind, da den frillige loggede ind.
    /// </summary>
    private User volenteerTarget = new User();
    /// <summary>
    /// What shift is taken from the list and will be checked out.
    /// </summary>
    private Shift shiftTarget = new Shift();
    private List<Shift> shifts = new List<Shift>();
    private Competences competences;





    //Shift Information
    private EditContext editContextShiftInfo;



    private static Action<VolenteerPages,int> volenteerPagesEvent;





    [Inject]
    public IShiftService ShiftService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //Henter alle vagter der findes på pgadmin/sql databasen.
        shifts = (await ShiftService.GetAllShifts()).ToList();
        //Henter den frilliges data, der blev gemt da den frillige loggede ind.

    }


    protected override void OnInitialized()
    {
        volenteerPagesEvent = PageChange;
        NewNavMenu();
    }

    private void NewNavMenu()
    {
        NavMenu.ChangeSideFlag(GucciFestival.Shared.NavigateMenus.NavigateMenus.Volenteer);
    }

    /// <summary>
    /// flag = true, alle vagter denne bruger har taget.
    /// flag = false, alle ledige vagter
    /// </summary>
    /// <param name="flag"></param>
    /// <returns></returns>
    private List<Shift> GetShiftsSpecific(bool flag, int user_id)
    {
        List<Shift> list = new List<Shift>();
        foreach (var item in shifts)
        {
            if(item.Shift_Taken_Id == user_id && flag)
            {
                Console.WriteLine(item.Shift_Taken_Id + " user_id: " + user_id);
                list.Add(item);
            }else if(item.Shift_Taken_Id == -1 && flag == false)
            {
                list.Add(item);
            }
        }
        return list;
    }






    private async Task TakeShift()
    {
        if (shiftTakeCheckBoksFlag)
        {
            foreach (var item in shifts)
            {
                if(item.Shift_Id == shiftTarget.Shift_Id)
                {
                    item.Shift_Taken_Id = volenteerTarget.User_id;
                    await ShiftService.UpdateShift(shiftTarget);
                }
            }
            SetShiftTarget(null,VolenteerPages.ShiftsOwn);
        }
    }

    private void SetShiftTarget(Shift shift,VolenteerPages page)
    {
        shiftTarget = shift;
        this.volenteerPages = page;
        Console.WriteLine("vagt info");
        Console.WriteLine("VolenteerPages: " + volenteerPages);

    }

    private void NavigateToSideProfil()
    {
        NavManager.NavigateTo("/profil");
    }

    public static void ButtonVolenteerPage(VolenteerPages page, int index)
    {

        volenteerPagesEvent?.Invoke(page,index);
    }
    private void PageChange(VolenteerPages page,int index)
    {
        if (NavManager.Uri != (NavManager.BaseUri.ToString() + "volenteerOwnPage"))
        {
            NavManager.NavigateTo("/volenteerOwnPage");
        }
        SetShiftTarget(null, page);     
        StateHasChanged();
    }
}
