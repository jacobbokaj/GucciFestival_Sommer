@using GucciFestival.Client.Models
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Competences
@using GucciFestival.Shared.Models
@inject NavigationManager NavManager
@page "/profil"
<h3>Profil</h3>

<EditForm EditContext=@editContext class="row p-3"
Context="formContext">
<DataAnnotationsValidator/>
<ValidationSummary/>
<div class="col-mb-4">
	<label for="Name">Name:</label>
	<InputText id="Name" @bind-Value="userModelV2.Name" class="form-control"/>
</div>
<div class="col-mb-4">
	<label for="Email">Email:</label>
	<InputText id="Email" @bind-Value="userModelV2.Email" class="form-control"/>
</div>
<div class="col-mb-4">
	<label for="Password">Password:</label>
	<InputText id="Password" @bind-Value="userModelV2.Password" class="form-control"/>
</div>
<div class="col-mb-4">
	<label for="Tlf">Tlf:</label>
	<InputNumber id="Tlf" @bind-Value="userModelV2.Phone" class="form-control"/>
</div>
<div class="col-mb-4">
	<label for="Birthday">Birthday:</label>
	<InputDate id="Birthday" @bind-Value="userModelV2.Birthday" class="form-control"/>
</div>

<div>
	@foreach (var item in competenceCheckBoxes)
   {
	   <label>@((Competences)item.CompetenceIndex)</label>
	   <InputCheckbox @bind-Value=item.HaveCompetenceFlag/>
   }
</div>

<Button id="button1" type="submit" @onclick=UserUpdate> Opdater profil</Button>
<Button id="button2" @onclick=UserDelete> Slet Profil</Button> 

<style>

	#button1 {
		background-color: forestgreen;
		width: 125px;
		border_radius: 8px;
		color: white;
		position: relative;
	}

	#button2 {
		background-color: red;
		width: 125px;
		border_radius: 8px;
		color: white;
		position: relative;
		left: 3%;
		
	}

</style>
</EditForm>
@code {
	private EditContext editContext;
	private UserModel userModel = new UserModel();
	private User userModelV2 = new User();

	private List<CompetenceCheckBox> competenceCheckBoxes = new List<CompetenceCheckBox>();

	[Inject]
	private IUserService UserService { get; set; }
	protected override void OnInitialized()
	{

		userModelV2 = Login.UserLogedin;

		for (var i = 0; i < 7; i++)
		{
			bool haveCompetenceFlag = false;
			for (var y = 0; y < userModelV2.Competences_Id.Count; y++)
			{
				if (i == userModelV2.Competences_Id[y])
				{
					haveCompetenceFlag = true;
				}
			}
			competenceCheckBoxes.Add(new CompetenceCheckBox(i,haveCompetenceFlag));
		}


		editContext = new EditContext(userModel);
	}

	private void UserDelete(){
		UserService.DeleteUser(userModelV2);

		Login.UserLogedin = null;
		NavManager.NavigateTo("/login");
		NavMenu.NavMenuChange(GucciFestival.Shared.NavigateMenus.NavigateMenus.MainSide);
	}
	private void UserUpdate()
	{
		UserService.UpdateUser(userModelV2);
	}


	public void HandleValidSubmit()
	{
		
	}
	public void HandleInvalidSubmit() {}
}
