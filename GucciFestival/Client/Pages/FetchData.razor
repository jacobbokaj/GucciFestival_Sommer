@page "/fetchdata"
@using GucciFestival.Client.Services
@using GucciFestival.Shared
@using GucciFestival.Shared.Models
@inject HttpClient Http


<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    //private List<Shift> shifts = new List<Shift>();
    //[Inject]
    //private IShiftService ServiceShift { get; set; }

    private List<Area> areas = new List<Area>();
    [Inject]
    private IAreaService ServiceArea { get; set;  }

    //private List<Volunteer> volunteers = new List<Volunteer>();
    //[Inject]
    //private IVolunteerService ServiceVolunteer { get; set; }

    private List<User> users = new List<User>();
    [Inject]
    private IUserService ServiceUser { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine("Hej");
    }
    protected override async Task OnInitializedAsync()
    {
       // users = (await ServiceUser.GetAllUsers()).ToList();
        // forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
       //  areas = (await ServiceArea.GetAllAreas()).ToList();
        //  shifts = (await ServiceShift.GetAllShifts()).ToList();
       // volunteers = (await ServiceVolunteer.GetAllVolunteers()).ToList();

    }
}
