@page "/coordinatorOwnSide"
@using GucciFestival.Client.Services
@using GucciFestival.Shared.Models
@using GucciFestival.Shared.NavigateMenus;
@inject NavigationManager NavManager


<h3>CoordinatorOwnSide</h3>
<button @onclick=NavigateToSideProfil>Profil</button>
<button @onclick="(() => SetShiftTarget(null,CoordinatorOwnSides.ShiftsAvailable,false))">Vagter Ledige</button>
<button @onclick="(() => SetShiftTarget(null,CoordinatorOwnSides.ShiftsTaken,false))">Vagter taget</button>
<button @onclick="(() => SetShiftTarget(null,CoordinatorOwnSides.Volenteers,false))">Frivillige</button>
<button @onclick="(() => NewNavMenu(NavigateMenus.Coordinator))">Nav menu test</button>
@if (shifts.Count == 0)
{

}
else
{
    @switch (side)
    {
        case CoordinatorOwnSides.ShiftsAvailable:
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in shifts)
                    {
                        <tr>
                            <td>@forecast.Name</td>
                            <td>@(competences)forecast.Competence_id</td>
                            <button @onclick="(() => SetShiftTarget(forecast,CoordinatorOwnSides.ShiftRead,false))">Se vagt</button>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case CoordinatorOwnSides.ShiftsTaken:
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Taget xDDD</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in shifts)
                    {
                        <tr>
                            <td>@forecast.Name</td>
                            <td>@(competences)forecast.Competence_id</td>
                            <button @onclick="(() => SetShiftTarget(forecast,CoordinatorOwnSides.ShiftRead,true))">Se vagt</button>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case CoordinatorOwnSides.Volenteers:

            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in volenteers)
                    {
                        <tr>
                            <td>@forecast.Name</td>
                            <td>@(competences)forecast.Competence_id</td>
                            <button @onclick="(() => CheckVolenteer(forecast))">Se den frivillige</button>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case CoordinatorOwnSides.VolenteersRead:
            <div>

                <h4>Frivillige  @volenteer.Name</h4>

                <h3>Start dato</h3>
                <h3>@shiftTarget.Start_Date</h3>

                <h3>Slut dato</h3>
                <h3>@shiftTarget.End_Date</h3>

                <h3>Description</h3>
                <h3>@shiftTarget.Description</h3>


            </div>



            break;
        case CoordinatorOwnSides.ShiftRead:
            <div>
                <h4>Shift name @shiftTarget.Name</h4>

                <h3>Start dato></h3>
                <h3>@shiftTarget.Start_Date</h3>

                <h3>Slut dato</h3>
                <h3>@shiftTarget.End_Date</h3>

                <h3>Description</h3>
                <h3>@shiftTarget.Description</h3>


                



            </div>
            break;

    }
}
@code {
    public enum CoordinatorOwnSides
    {
        ShiftsAvailable,
        ShiftsTaken,
        ShiftCreate,
        Volenteers,
        VolenteersRead,
        ShiftRead,
    }

    /// <summary>
    /// True= ownshift, false= overallShift
    /// </summary>
    private bool ownShiftFlag;
    /// <summary>
    /// Brugt til checkboks, checke om "user"/frivllig er sikker på at tage vagten
    /// </summary>
    private bool shiftTakeFlag;


    private CoordinatorOwnSides side;
    private bool takenFlag;

    /// <summary>
    /// Den frillige brugers her og får dataen ved hjælp af "blazored.localstorage"
    /// Den frillige localstorage ved sat ind, da den frillige loggede ind.
    /// </summary>
    private User volenteerTarget = new User();
    /// <summary>
    /// What shift is taken from the list and will be checked out.
    /// </summary>
    private Shift shiftTarget = new Shift();
    private List<Shift> shifts = new List<Shift>();

    private User volenteer = new User();
    private List<User> volenteers = new List<User>();



    private Competences competences;





    //Shift Information
    private EditContext editContextShiftInfo;










    [Inject]
    public IShiftService ShiftService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ////Henter alle vagter der findes på pgadmin/sql databasen.
        shifts = (await ShiftService.GetAllShifts()).ToList();
        ////Henter den frilliges data, der blev gemt da den frillige loggede ind.
        //volenteerTarget = await localStore.GetItemAsync<User>("volenteer");
    }



    private void NavigateToSideProfil()
    {
        NavManager.NavigateTo("/profil");
    }
     private void NewNavMenu(NavigateMenus navigateMenu)
    {
        
        NavMenu.ChangeSideFlag(navigateMenu);
    }

    private void TakeShift()
    {
        if (shiftTakeFlag)
        {
            foreach (var item in shifts)
            {
                if (item.Shift_Id == shiftTarget.Shift_Id)
                {
                    item.Shift_Taken_Id = volenteerTarget.User_id;
                }
            }
            SetShiftTarget(null, CoordinatorOwnSides.ShiftsAvailable, false);
        }
    }

    private void CheckVolenteer(User volenteer)
    {

    }


    private void SetShiftTarget(Shift shift, CoordinatorOwnSides side, bool ownShiftFlag)
    {
        shiftTarget = shift;
        this.side = side;
        this.ownShiftFlag = ownShiftFlag;
        Console.WriteLine("vagt info");

    }
}
